#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

void initialize() {
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        printf("Enter the total number of resources for resource %d: ", i + 1);
        scanf("%d", &available[i]);
    }
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("Enter the maximum resources for process %d:\n", i + 1);
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            printf("Resource %d: ", j + 1);
            scanf("%d", &max[i][j]);
        }
    }

    for (int i = 0; i < MAX_PROCESSES; ++i) {
        for (int j = 0; j < MAX_RESOURCES; ++j) {
            allocation[i][j] = 0;
            need[i][j] = max[i][j];
        }
    }
}

int isSafe(int process, int request[]) {
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > need[process][i]) {
            printf("Error: Request exceeds maximum need.\n");
            return 0;
        }
    }

    for (int i = 0; i < MAX_RESOURCES; ++i) {
        if (request[i] > available[i]) {
            printf("Error: Request exceeds available resources.\n");
            return 0;
        }
    }

    for (int i = 0; i < MAX_RESOURCES; ++i) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }
    int finish[MAX_PROCESSES] = {0};
    int work[MAX_RESOURCES];
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        work[i] = available[i];
    }

    int safeSequence[MAX_PROCESSES];
    int count = 0;

    while (count < MAX_PROCESSES) {
        int found = 0;
        for (int i = 0; i < MAX_PROCESSES; ++i) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < MAX_RESOURCES; ++j) {
                    if (need[i][j] > work[j]) {
                        break;
                    }
                }
                if (j == MAX_RESOURCES) {
                    for (int k = 0; k < MAX_RESOURCES; ++k) {
                        work[k] += allocation[i][k];
                    }
                    safeSequence[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            for (int i = 0; i < MAX_RESOURCES; ++i) {
                available[i] += request[i];
                allocation[process][i] -= request[i];
                need[process][i] += request[i];
            }
            return 0;
        }
    }
    printf("Safe Sequence: ");
    for (int i = 0; i < MAX_PROCESSES; ++i) {
        printf("%d ", safeSequence[i] + 1);
    }
    printf("\n");

    return 1;
}
void resourceRequest() {
    int process;
    int request[MAX_RESOURCES];

    printf("Enter the process making the request: ");
    scanf("%d", &process);

    if (process < 1 || process > MAX_PROCESSES) {
        printf("Invalid process number.\n");
        return;
    }

    printf("Enter the resource request for process %d:\n", process);
    for (int i = 0; i < MAX_RESOURCES; ++i) {
        printf("Resource %d: ", i + 1);
        scanf("%d", &request[i]);
    }

    if (isSafe(process - 1, request)) {
        printf("Resource request granted.\n");
    } else {
        printf("Resource request denied.\n");
    }
}

int main() {
    initialize();

    int choice;
    do {
        printf("\nBanker's Algorithm Simulation:\n");
        printf("1. Resource Request\n");
        printf("2. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                resourceRequest();
                break;
            case 2:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 2);

    return 0;
}
