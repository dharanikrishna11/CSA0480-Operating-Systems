#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024

int main() {
  
    key_t key = ftok("shared_memory_example", 'R');

    int shmid = shmget(key, SHM_SIZE, IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }

    char *shared_memory = shmat(shmid, NULL, 0);
    if (shared_memory == (char *)-1) {
        perror("shmat");
        exit(1);
    }

    sprintf(shared_memory, "Hello, shared memory!");

    pid_t pid = fork();

    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid > 0) {
        
        printf("Parent process waiting for the child to read from shared memory...\n");
        wait(NULL);
        printf("Parent process: Child read: %s\n", shared_memory);
t
        shmdt(shared_memory);

        shmctl(shmid, IPC_RMID, NULL);
    } else {
      
        printf("Child process reading from shared memory: %s\n", shared_memory);

        shmdt(shared_memory);

        exit(0);
    }

    return 0;
}
