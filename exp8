#include<stdio.h>

struct Process {
    int id;             
    int burst_time;    
    int remaining_time; 
};

void roundRobin(struct Process processes[], int n, int time_quantum) {
    int remaining_processes = n;
    int time = 0;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            
            if (processes[i].remaining_time > 0) {
                
                int execution_time = (processes[i].remaining_time > time_quantum) ? time_quantum : processes[i].remaining_time;
                processes[i].remaining_time -= execution_time;
                time += execution_time;

                printf("Time %d: Process P%d executes for %d units.\n", time, processes[i].id, execution_time);

                if (processes[i].remaining_time == 0) {
                    remaining_processes--;
                }
            }
        }
    }
}
void calculateAverageTimes(struct Process processes[], int n) {
    int total_turnaround_time = 0;
    int total_waiting_time = 0;

    for (int i = 0; i < n; i++) {
        int turnaround_time = processes[i].burst_time;
        int waiting_time = turnaround_time - processes[i].burst_time;
        total_turnaround_time += turnaround_time;
        total_waiting_time += waiting_time;

        printf("Process P%d -- Turnaround Time: %d, Waiting Time: %d\n", processes[i].id, turnaround_time, waiting_time);
    }

    float average_turnaround_time = (float)total_turnaround_time / n;
    float average_waiting_time = (float)total_waiting_time / n;

    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
    printf("Average Waiting Time: %.2f\n", average_waiting_time);
}

int main() {
    int n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    roundRobin(processes, n, time_quantum);

    calculateAverageTimes(processes, n);

    return 0;
}
