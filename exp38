#include <stdio.h>
#include <stdlib.h>

#define MAX_REQUESTS 100

void scan(int requests[], int numRequests, int headStart, int direction) {
    int totalSeekTime = 0;
    int currentHead = headStart;
    int end = (direction == 1) ? 199 : 0; // Assume disk size is 200 in this example

    printf("Order of service:\n");

    if (direction == 1) {
        // Moving towards higher cylinder numbers
        for (int i = currentHead; i <= end; ++i) {
            for (int j = 0; j < numRequests; ++j) {
                if (i == requests[j]) {
                    printf("%d ", i);
                    totalSeekTime += abs(currentHead - requests[j]);
                    currentHead = requests[j];
                }
            }
        }
    } else {
        // Moving towards lower cylinder numbers
        for (int i = currentHead; i >= end; --i) {
            for (int j = 0; j < numRequests; ++j) {
                if (i == requests[j]) {
                    printf("%d ", i);
                    totalSeekTime += abs(currentHead - requests[j]);
                    currentHead = requests[j];
                }
            }
        }
    }

    printf("\nTotal Seek Time: %d\n", totalSeekTime);
}

int main() {
    int requests[MAX_REQUESTS];
    int numRequests;
    int headStart;
    int direction; // 1 for towards higher cylinder numbers, 0 for towards lower cylinder numbers

    printf("Enter the number of requests: ");
    scanf("%d", &numRequests);

    if (numRequests <= 0 || numRequests > MAX_REQUESTS) {
        printf("Invalid number of requests.\n");
        return 1;
    }

    printf("Enter the initial head position: ");
    scanf("%d", &headStart);

    printf("Enter the disk requests:\n");
    for (int i = 0; i < numRequests; ++i) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the direction (1 for towards higher cylinder numbers, 0 for towards lower cylinder numbers): ");
    scanf("%d", &direction);

    scan(requests, numRequests, headStart, direction);

    return 0;
}
